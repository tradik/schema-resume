name: Release Packages

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.1.0)'
        required: true
        type: string

env:
  VERSION: ${{ github.event.inputs.version || github.ref_name }}

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag: ${{ steps.get_version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="v${VERSION}"
          else
            TAG="${{ github.ref_name }}"
            VERSION="${TAG#v}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"
          echo "Tag: ${TAG}"

  release-npm:
    name: Release NPM Package
    runs-on: ubuntu-latest
    needs: prepare
    outputs:
      status: ${{ steps.publish.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        working-directory: packages/npm
        run: npm install

      - name: Run tests
        working-directory: packages/npm
        run: npm test

      - name: Publish to NPM
        id: publish
        working-directory: packages/npm
        run: |
          # Publish to NPM, handle version conflicts gracefully
          npm publish 2>&1 | tee npm_publish.log || {
            if grep -q "You cannot publish over the previously published versions" npm_publish.log || \
               grep -q "cannot modify pre-existing version" npm_publish.log; then
              echo "⚠️ Version already exists on NPM, skipping"
              exit 0
            else
              echo "❌ NPM publish failed"
              cat npm_publish.log
              exit 1
            fi
          }
          echo "✅ Package published to NPM successfully"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  release-python:
    name: Release Python Package
    runs-on: ubuntu-latest
    needs: prepare
    outputs:
      status: ${{ steps.publish.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        working-directory: packages/python
        run: python -m build

      - name: Publish to PyPI
        id: publish
        working-directory: packages/python
        run: |
          # Upload to PyPI with verbose output for debugging
          echo "Uploading to PyPI..."
          python -m twine upload dist/* --skip-existing --verbose 2>&1 | tee upload.log
          
          # Check for specific errors
          if grep -q "403" upload.log; then
            echo "❌ 403 Forbidden Error - Check:"
            echo "  1. PYPI_TOKEN is valid and not expired"
            echo "  2. Token has 'Upload packages' permission"
            echo "  3. You own the 'schema-resume-validator' package on PyPI"
            echo "  4. Token format is correct (starts with 'pypi-')"
            exit 1
          fi
          
          echo "✅ Package uploaded to PyPI (or already exists)"
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

  release-golang:
    name: Release Go Package
    runs-on: ubuntu-latest
    needs: prepare
    outputs:
      status: ${{ steps.tag.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Download dependencies
        working-directory: packages/golang
        run: go mod download

      - name: Run tests
        working-directory: packages/golang
        run: go test -v ./...

      - name: Tag Go module
        id: tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          GO_TAG="packages/golang/${{ needs.prepare.outputs.tag }}"
          
          # Fetch all tags from remote
          git fetch --tags
          
          # Check if tag exists locally or remotely
          if git rev-parse "$GO_TAG" >/dev/null 2>&1; then
            echo "✅ Tag $GO_TAG already exists locally, skipping"
          elif git ls-remote --tags origin | grep -q "refs/tags/$GO_TAG"; then
            echo "✅ Tag $GO_TAG already exists on remote, skipping"
          else
            git tag "$GO_TAG"
            git push origin "$GO_TAG"
            echo "✅ Created and pushed tag $GO_TAG"
          fi

  release-java:
    name: Release Java Package
    runs-on: ubuntu-latest
    needs: prepare
    outputs:
      status: ${{ steps.publish.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build with Maven
        working-directory: packages/java
        run: mvn clean package

      - name: Publish to Maven Central
        id: publish
        working-directory: packages/java
        run: mvn deploy
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}

  release-ruby:
    name: Release Ruby Gem
    runs-on: ubuntu-latest
    needs: prepare
    outputs:
      status: ${{ steps.publish.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'

      - name: Build gem
        working-directory: packages/ruby
        run: gem build schema-resume-validator.gemspec

      - name: Publish to RubyGems
        id: publish
        working-directory: packages/ruby
        run: |
          mkdir -p ~/.gem
          echo ":rubygems_api_key: ${{ secrets.RUBYGEMS_API_KEY }}" > ~/.gem/credentials
          chmod 0600 ~/.gem/credentials
          # Push gem, handle version conflicts gracefully
          gem push schema-resume-validator-*.gem 2>&1 | tee gem_push.log || {
            if grep -q "Repushing of gem versions is not allowed" gem_push.log || \
               grep -q "version already exists" gem_push.log; then
              echo "⚠️ Version already exists on RubyGems, skipping"
              exit 0
            else
              echo "❌ RubyGems push failed"
              cat gem_push.log
              exit 1
            fi
          }
          echo "✅ Gem published to RubyGems successfully"

  release-php:
    name: Release PHP Package
    runs-on: ubuntu-latest
    needs: prepare
    outputs:
      status: ${{ steps.validate.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer

      - name: Validate composer.json
        id: validate
        working-directory: packages/php
        run: composer validate

      - name: Install dependencies
        working-directory: packages/php
        run: composer install --prefer-dist --no-progress

      - name: Create release note
        run: |
          echo "PHP package is published via Packagist automatically when tags are pushed"
          echo "Package will be available at: https://packagist.org/packages/schema-resume/validator"

  release-status:
    name: Release Status Summary
    runs-on: ubuntu-latest
    needs: [prepare, release-npm, release-python, release-golang, release-java, release-ruby, release-php]
    if: always()
    steps:
      - name: Generate Status Report
        run: |
          echo "# Release Status for ${{ needs.prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Package Release Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # NPM
          if [ "${{ needs.release-npm.result }}" == "success" ]; then
            echo "✅ **NPM**: Published successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **NPM**: Failed (${{ needs.release-npm.result }})" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Python
          if [ "${{ needs.release-python.result }}" == "success" ]; then
            echo "✅ **Python**: Published successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Python**: Failed (${{ needs.release-python.result }})" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Go
          if [ "${{ needs.release-golang.result }}" == "success" ]; then
            echo "✅ **Go**: Tagged successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Go**: Failed (${{ needs.release-golang.result }})" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Java
          if [ "${{ needs.release-java.result }}" == "success" ]; then
            echo "✅ **Java**: Published successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Java**: Failed (${{ needs.release-java.result }})" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Ruby
          if [ "${{ needs.release-ruby.result }}" == "success" ]; then
            echo "✅ **Ruby**: Published successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Ruby**: Failed (${{ needs.release-ruby.result }})" >> $GITHUB_STEP_SUMMARY
          fi
          
          # PHP
          if [ "${{ needs.release-php.result }}" == "success" ]; then
            echo "✅ **PHP**: Validated successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **PHP**: Failed (${{ needs.release-php.result }})" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [ "${{ needs.release-npm.result }}" == "success" ] && \
             [ "${{ needs.release-python.result }}" == "success" ] && \
             [ "${{ needs.release-golang.result }}" == "success" ] && \
             [ "${{ needs.release-java.result }}" == "success" ] && \
             [ "${{ needs.release-ruby.result }}" == "success" ] && \
             [ "${{ needs.release-php.result }}" == "success" ]; then
            echo "✅ **All packages released successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some packages failed to release. Check the logs above.**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare, release-npm, release-python, release-golang, release-java, release-ruby, release-php]
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release Notes
        id: release_notes
        run: |
          cat << EOF > release_notes.md
          # Schema Resume ${{ needs.prepare.outputs.version }}

          ## Package Releases

          This release includes packages for multiple programming languages:

          ### NPM (JavaScript/TypeScript)
          \`\`\`bash
          npm install schema-resume-validator
          \`\`\`
          - Package: [schema-resume-validator](https://www.npmjs.com/package/schema-resume-validator)

          ### Python
          \`\`\`bash
          pip install schema-resume-validator
          \`\`\`
          - Package: [schema-resume-validator](https://pypi.org/project/schema-resume-validator/)

          ### Go
          \`\`\`bash
          go get github.com/tradik/schema-resume/validator@${{ needs.prepare.outputs.tag }}
          \`\`\`
          - Package: [github.com/tradik/schema-resume/validator](https://pkg.go.dev/github.com/tradik/schema-resume/validator)

          ### Java (Maven)
          \`\`\`xml
          <dependency>
              <groupId>org.schema-resume</groupId>
              <artifactId>schema-resume-validator</artifactId>
              <version>${{ needs.prepare.outputs.version }}</version>
          </dependency>
          \`\`\`
          - Package: [Maven Central](https://search.maven.org/artifact/org.schema-resume/schema-resume-validator)

          ### Ruby
          \`\`\`bash
          gem install schema-resume-validator
          \`\`\`
          - Package: [schema-resume-validator](https://rubygems.org/gems/schema-resume-validator)

          ### PHP (Composer)
          \`\`\`bash
          composer require schema-resume/validator
          \`\`\`
          - Package: [schema-resume/validator](https://packagist.org/packages/schema-resume/validator)

          ## Schema Files

          All packages include:
          - **schema.json** - Main JSON Schema
          - **meta-schema.json** - Meta-schema for validation
          - **context.jsonld** - JSON-LD context for semantic web integration
          - **schema-resume.xsd** - XML Schema Definition

          ## Links

          - **Website**: https://schema-resume.org/
          - **Documentation**: https://github.com/tradik/schema-resume
          - **Online Validator**: https://schema-resume.org/validator.html
          - **Changelog**: https://github.com/tradik/schema-resume/blob/main/CHANGELOG.md

          ## Support

          - Email: info@schema-resume.org or support@tradik.com
          - Issues: https://github.com/tradik/schema-resume/issues
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.tag }}
          name: Release ${{ needs.prepare.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
